# -*- coding: utf-8 -*-
import os
import random
import requests
import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from flask import Flask
from threading import Thread

# Telegram Bot Token
TELEGRAM_TOKEN = "7861495333:AAGb8W-B4nFg0cM8cnmLJRCbLcTpG5yQxWI"

# OpenWeatherMap API Key
OPENWEATHER_API_KEY = "f90904c2ab88b6543e799322389c4c31"

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask App for Keep-Alive
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    flask_app.run(host="0.0.0.0", port=port)

def keep_alive():
    Thread(target=run_flask).start()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π CS2 —á–µ—Ä–µ–∑ HLTV API
def get_upcoming_matches():
    url = "https://hltv-api.vercel.app/api/matches"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            matches = response.json()
            upcoming_matches = []
            for match in matches[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –º–∞—Ç—á–µ–π
                teams = ", ".join([team.get("name", "Unknown") for team in match.get("teams", [])])
                time = match.get("time", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                upcoming_matches.append(f"{time}: {teams}")
            return "\n".join(upcoming_matches) if upcoming_matches else "–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–µ–π."
        logger.error(f"–û—à–∏–±–∫–∞ HTTP {response.status_code} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π.")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
def get_bitcoin_and_other_currencies():
    url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,ripple,cardano,solana&vs_currencies=usd"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            return "\n".join([f"{coin.capitalize()}: ${price['usd']}" for coin, price in data.items()])
        logger.error(f"–û—à–∏–±–∫–∞ HTTP {response.status_code} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —Ä—ã–±—ã
def get_fish_rates():
    rates = {fish: round(random.uniform(10, 1000), 2) for fish in ["–∫–∞—Ä–∞—Å—å", "–ª–µ—â", "–ø–ª–æ—Ç–≤–∞", "—Ç—É–Ω–µ—Ü", "–∞–∫—É–ª–∞"]}
    return "\n".join([f"{fish.capitalize()}: {rate} –≥—Ä–Ω" for fish, rate in rates.items()])

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞
def get_joke():
    url = "https://rozdil.lviv.ua/anekdot/"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, "html.parser")
            jokes = [joke.get_text().strip() for joke in soup.find_all("a", class_="hoveranek black")]
            if jokes:
                return random.choice(jokes)
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
            return "–ê–Ω–µ–∫–¥–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        logger.error(f"–û—à–∏–±–∫–∞ HTTP {response.status_code} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤.")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ –ö–∏–µ–≤–µ
def get_weather():
    city = "Kyiv"
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            temp = round(data["main"]["temp"])
            description = data["weather"][0]["description"].capitalize()
            return f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {temp}¬∞C, {description}"
        logger.error(f"–û—à–∏–±–∫–∞ HTTP {response.status_code} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–≥–æ–¥—ã.")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞ —á–µ—Ä–µ–∑ API Imgflip
def get_random_meme():
    url = "https://api.imgflip.com/get_memes"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            memes = response.json().get("data", {}).get("memes", [])
            return random.choice(memes)["url"] if memes else None
        logger.error(f"–û—à–∏–±–∫–∞ HTTP {response.status_code} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–º–∞.")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–º–∞: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower()
    chat_id = update.effective_chat.id

    if "–≥–µ–π–º" in user_message:
        matches = get_upcoming_matches()
        await context.bot.send_message(chat_id, text=f"üéÆ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ CS2:\n\n{matches}")
    elif "–±–∏—Ç–æ–∫" in user_message:
        currencies = get_bitcoin_and_other_currencies()
        await context.bot.send_message(chat_id, text=f"üí∞ –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n{currencies}")
    elif "–∫—É—Ä—Å" in user_message:
        fish_rates = get_fish_rates()
        await context.bot.send_message(chat_id, text=f"üêü –ö—É—Ä—Å—ã —Ä—ã–±—ã:\n\n{fish_rates}")
    elif "–∞–Ω–µ–∫–¥–æ—Ç" in user_message:
        joke = get_joke()
        await context.bot.send_message(chat_id, text=joke)
    elif "–º–µ–º" in user_message:
        meme_url = get_random_meme()
        if meme_url:
            await context.bot.send_photo(chat_id, photo=meme_url)
        else:
            await context.bot.send_message(chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º.")
    elif "–ø–æ–≥–æ–¥–∞" in user_message:
        weather = get_weather()
        await context.bot.send_message(chat_id, text=weather)
    elif "–∫—Å" in user_message or "–∫–∞—Ç–∫–∞" in user_message:
        responses = [
            "–°–Ω–æ–≤–∞ –∑–∞–¥—Ä–æ—Ç –≤ –¥–µ–ª–µ! üéÆ",
            "–ì–æ—Ç–æ–≤—å—Å—è –∫ –±–∏—Ç–≤–µ! üî•",
            "–ö–∞—Ç–∫–∞ –∑–æ–≤—ë—Ç, –Ω–æ —Ç—ã —Ç–æ—á–Ω–æ –ø–æ—Ç—è–Ω–µ—à—å? üòÇ",
        ]
        await context.bot.send_message(chat_id, text=random.choice(responses))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    keep_alive()
    app.run_polling()

if __name__ == "__main__":
    main()
