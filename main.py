# -*- coding: utf-8 -*-

import random
import requests
import logging
from telegram import Update, Bot
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from bs4 import BeautifulSoup
from flask import Flask
from threading import Thread
import schedule
import time

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_TOKEN = "7861495333:AAGFdhHavI5gd1_DRVtilAd-O2qmcA8iDeo"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Bot API
bot = Bot(token=TELEGRAM_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_commands_count = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–≤–æ–≥–∏ –¥–ª—è –ö–∏–µ–≤–∞
def check_kyiv_alert():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–≤–æ–≥—É –≤ –ö–∏–µ–≤–µ –Ω–∞ —Å–∞–π—Ç–µ https://map.ukrainealarm.com/."""
    url = 'https://map.ukrainealarm.com/'
    try:
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            kyiv_status = soup.find('div', class_='Kyiv')  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            if kyiv_status and '–¢—Ä–∏–≤–æ–≥–∞' in kyiv_status.text:
                return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–µ–≤–æ–≥–∏: {e}")
        return False

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
def send_alert_message(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ —Ç—Ä–µ–≤–æ–≥–µ –≤ Telegram."""
    message = "–ü–∞–ª—É–Ω–¥—Ä–∞ !!! –ú—ã –≤—Å–µ –æ–±–∫–∞–∫–∞–µ–º—Å—è! –¢—Ä–µ–≤–æ–≥–∞ –ö–∏–µ–≤"
    image_url = "https://raw.githubusercontent.com/morsikha/lashelov/main/alert.jpg"

    try:
        bot.send_message(chat_id=chat_id, text=message)
        bot.send_photo(chat_id=chat_id, photo=image_url)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
def start_scheduler(chat_id):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–≤–æ–≥."""
    def job():
        if check_kyiv_alert():
            send_alert_message(chat_id)

    schedule.every(1).minutes.do(job)
    while True:
        schedule.run_pending()
        time.sleep(1)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
fish_list = ["–∫–∞—Ä–∞—Å—å", "–ª–µ—â", "–ø–ª–æ—Ç–≤–∞", "—Ç—É–Ω–µ—Ü", "–∞–∫—É–ª–∞"]

def get_fish_rates():
    rates = {fish: round(random.uniform(10, 1000), 2) for fish in fish_list}
    rate_message = "\n".join([f"{fish.capitalize()}: {rate} –≥—Ä–Ω" for fish, rate in rates.items()])
    return f"üêü –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã —Ä—ã–±–µ—à–∫–∏:\n\n{rate_message}"

def get_bitcoin_rate():
    url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        btc_price = data["bitcoin"]["usd"]
        return f"üí∞ –ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞: ${btc_price} USD"
    else:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞."

def get_meme():
    return "https://raw.githubusercontent.com/morsikha/lashelov/main/alert.jpg"

def get_ukrainian_joke():
    url = "https://rozdil.lviv.ua/anekdot/"
    response = requests.get(url)

    if response.status_code == 200:
        soup = BeautifulSoup(response.content, "html.parser")
        jokes = [joke.get_text().strip() for joke in soup.find_all("a", class_="hoveranek black")]

        if jokes:
            return random.choice(jokes)
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ."
    else:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = update.effective_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = update.effective_chat.id  # ID —á–∞—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã
    user_message = update.message.text.lower()  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    logger.info(f"DEBUG: {update}")

    # –õ–æ–≥–∏—Ä—É–µ–º ID —á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã –∏ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(f"ID —á–∞—Ç–∞: {chat_id}, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.username} ({user_id}): {user_message}")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
    logger.info(f"ID —á–∞—Ç–∞: {update.effective_chat.id}")

    # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–∞—è –±–µ—Å–µ–¥–∞, –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if update.effective_chat.type in ["group", "supergroup"]:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø—ã: {update.effective_chat.title} (ID: {chat_id})")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á—ë—Ç—á–∏–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_commands_count:
        user_commands_count[user_id] = 0

    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥
    if any(cmd in user_message for cmd in ["–∫—É—Ä—Å", "–±–∏—Ç–æ–∫", "–∞–Ω–µ–∫–¥–æ—Ç", "–º–µ–º"]):
        user_commands_count[user_id] += 1
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª {user_commands_count[user_id]} –∫–æ–º–∞–Ω–¥(—ã).")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        if user_commands_count[user_id] >= 3:
            await context.bot.send_message(chat_id=chat_id, text="–í—ã –æ—á–º–∞–Ω–µ–ª–∏, —è —É—Å—Ç–∞–ª! –ò–¥–∏ –ª–æ–≤–∏—Ç—å –ª—è—â–∞!")
            return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    if "–∫—É—Ä—Å" in user_message:
        rates_message = get_fish_rates()
        await context.bot.send_message(chat_id=chat_id, text=rates_message)

    elif "–±–∏—Ç–æ–∫" in user_message:
        btc_message = get_bitcoin_rate()
        await context.bot.send_message(chat_id=chat_id, text=btc_message)

    elif "–º–µ–º" in user_message:
        meme_url = get_meme()
        await context.bot.send_photo(chat_id=chat_id, photo=meme_url)

    elif "–∞–Ω–µ–∫–¥–æ—Ç" in user_message:
        joke_message = get_ukrainian_joke()
        await context.bot.send_message(chat_id=chat_id, text=joke_message)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if any(word in user_message for word in ["–∫—Å", "cs", "–∫–∞—Ç–∫–∞", "–∫–∞—Ç–∫—É"]):
        await context.bot.send_message(chat_id=chat_id, text="–∑–∞–¥—Ä–æ—Ç")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    app.add_handler(text_handler)

    # –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    chat_id = "–í–ê–®_CHAT_ID"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID —á–∞—Ç–∞
    t = Thread(target=start_scheduler, args=(chat_id,))
    t.start()
    
 # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    debug_handler = MessageHandler(filters.ALL, debug_update)
    app.add_handler(debug_handler)
    
    keep_alive()
    app.run_polling()

if __name__ == '__main__':
    main()
