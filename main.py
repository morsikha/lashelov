# -*- coding: utf-8 -*-
import os
import random
import requests
import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from bs4 import BeautifulSoup
from flask import Flask
from threading import Thread
import schedule
import time
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API
OPENAI_API_KEY = "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"  # –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π API-–∫–ª—é—á
openai.api_key = OPENAI_API_KEY

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI
def ask_openai(prompt):
    try:
        response = openai.Completion.create(
            engine="text-davinci-003",  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω—É–∂–Ω—ã–π –¥–≤–∏–∂–æ–∫
            prompt=prompt,
            max_tokens=150,
            n=1,
            stop=None,
            temperature=0.7,
        )
        return response["choices"][0]["text"].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API: {e}")
        return "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å."

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_TOKEN = "7861495333:AAGb8W-B4nFg0cM8cnmLJRCbLcTpG5yQxWI"

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@flask_app.route('/health')
def health_check():
    return "OK", 200

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    flask_app.run(host='0.0.0.0', port=port)

def keep_alive():
    Thread(target=run_flask).start()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–≤–æ–≥–∏ –≤ –ö–∏–µ–≤–µ
def check_kyiv_alert():
    url = 'https://map.ukrainealarm.com/'
    try:
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            kyiv_status = soup.find('div', class_='Kyiv')
            if kyiv_status and '–¢—Ä–∏–≤–æ–≥–∞' in kyiv_status.text:
                return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–µ–≤–æ–≥–∏: {e}")
    return False

async def send_alert_message(chat_id: int):
    message = "–ü–∞–ª—É–Ω–¥—Ä–∞ !!! –ú—ã –≤—Å–µ –æ–±–∫–∞–∫–∞–µ–º—Å—è! –¢—Ä–µ–≤–æ–≥–∞ –ö–∏–µ–≤"
    image_url = "https://raw.githubusercontent.com/morsikha/lashelov/main/alert.jpg"
    try:
        await app.bot.send_message(chat_id=chat_id, text=message)
        await app.bot.send_photo(chat_id=chat_id, photo=image_url)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def start_scheduler(chat_id: int):
    def job():
        if check_kyiv_alert():
            app.create_task(send_alert_message(chat_id))

    schedule.every(1).minutes.do(job)
    while True:
        schedule.run_pending()
        time.sleep(1)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞ —á–µ—Ä–µ–∑ API Imgflip
def get_random_meme():
    url = "https://api.imgflip.com/get_memes"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            memes = data.get("data", {}).get("memes", [])
            if memes:
                random_meme = random.choice(memes)
                return random_meme["url"]
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞: {e}")
        return None

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower()
    chat_id = update.effective_chat.id
    
# –†–µ–∞–∫—Ü–∏—è –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ "–±–æ—Ç" —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI
    if "–±–æ—Ç" in user_message:
        ai_response = ask_openai(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: {user_message}")
        await context.bot.send_message(chat_id=chat_id, text=ai_response)
        return

   # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Ç–µ–º—É CS –∏–ª–∏ –∏–≥—Ä
    if any(keyword in user_message for keyword in ["–∫–∞—Ç–∫–∞", "–∫–∞—Ç–∫—É", "–∫–∞—Ç–æ—á–∫—É", "–∫—Å", "cs", "–±—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å"]):
        phrases = [
        "–í–Ω–∏–º–∞–Ω–∏–µ, –≤–Ω–∏–º–∞–Ω–∏–µ! –°–º–æ—Ç—Ä–∏—Ç–µ —Å—é–¥–∞: –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–∞–¥—Ä–æ—Ç –ö–° –≤ —Å–≤–æ—ë–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∞—Ä–µ–∞–ª–µ!",
        "–í—Å–µ–º –∑–∞–º–µ—Ä–µ—Ç—å! –ü–µ—Ä–µ–¥ –Ω–∞–º–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ—Ä–æ–ª—å –∫–∞—Ç–æ–∫ –∏ –∑–∞–¥—Ä–æ—Ç—Å—Ç–≤–∞!",
        "–û–ø–∞—Å–Ω–æ—Å—Ç—å! –ó–∞–¥—Ä–æ—Ç –ö–° –≤ –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è. –°—Ä–æ—á–Ω–æ –∏—â–µ–º –ø—Ä–æ—Ç–∏–≤–æ—è–¥–∏–µ!",
        "–≠–π, —á–µ–º–ø–∏–æ–Ω! –¢—ã —Å–Ω–æ–≤–∞ –≤ –¥–µ–ª–µ? –ì–æ—Ç–æ–≤—å—Å—è, —Ç–≤–æ—è –∫–∞—Ç–∫–∞ –∂–¥—ë—Ç!",
        "–õ–µ–≥–µ–Ω–¥–∞ –ö–° –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —á–∞—Ç–µ! –í—Å–µ –∞–ø–ª–æ–¥–∏—Ä—É–µ–º! üëè",
        "–ö—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞–ª '–∫–∞—Ç–∫–∞'? –ó–∞–¥—Ä–æ—Ç —É–∂–µ –≥–æ—Ç–æ–≤ –∑–∞—Ç–∞—â–∏—Ç—å! üéÆ",
        "–ê–ª–ª–æ, —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–≥—Ä? –£ –Ω–∞—Å —Ç—É—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª –ö–° —Ä–∞–∑–≥—É–ª–∏–≤–∞–µ—Ç!",
        "–≠—Ç–æ —á—Ç–æ, —á–µ–º–ø–∏–æ–Ω–∞—Ç –º–∏—Ä–∞ –ø–æ –∑–∞–¥—Ä–æ—Ç—Å—Ç–≤—É? –ü—Ä—è–º–æ –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å? üî•",
        "–ù—É –≤—Å—ë, –∫—Ç–æ-—Ç–æ —Å–Ω–æ–≤–∞ –≥–æ—Ç–æ–≤ –ª–æ–º–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –º—ã—à–∫–∏ –≤ –ö–°!",
        "–°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —ç—Ç–æ–≥–æ –±–æ–π—Ü–∞! –° –Ω–∏–º –Ω–µ –ø–æ—Å–ø–æ—Ä–∏—à—å ‚Äî –º–∞—Å—Ç–µ—Ä –≤—Å–µ—Ö –∫–∞—Ç–æ–∫.",
        "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –∏–≥—Ä–æ–∫ —É—Ä–æ–≤–Ω—è '–∑–∞–¥—Ä–æ—Ç PRO'. –ë–æ–π—Ç–µ—Å—å –∏ —É–≤–∞–∂–∞–π—Ç–µ!",
        "–ó–∞–¥—Ä–æ—Ç –ö–° –∑–∞–º–µ—á–µ–Ω! –í—Å–µ–º —Å—Ä–æ—á–Ω–æ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏! üõ°Ô∏è",
        "–í–ù–ò–ú–ê–ù–ò–ï! –ì–µ–π–º–µ—Ä 99-–≥–æ —É—Ä–æ–≤–Ω—è –≤–æ—à—ë–ª –≤ —á–∞—Ç.",
        "–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë—Ç—Å—è —ç–ø–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–∫–∞ –∏–ª–∏ –æ–ø—è—Ç—å –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã? üéß",
        "–°–æ–±—Ä–∞–ª–∏—Å—å, –∫–∞—Ç–∫—É –¥–µ–ª–∞–µ–º! –ó–∞–¥—Ä–æ—Ç —É–∂–µ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞–µ—Ç —Ä—É–∫–∏!",
        "–¢—É—Ç –∑–∞–ø–∞—Ö–ª–æ –∫–∞—Ç–∫–æ–π! –ì–æ—Ç–æ–≤–∏–º—Å—è –Ω–∞–±–ª—é–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–π–º–∏–Ω–≥.",
        "–¢—ã —Å–Ω–æ–≤–∞ –≤ –¥–µ–ª–µ? –ö–∞—Ç–∫–∏ –∑–æ–≤—É—Ç, –∞ —Ç—ã –ª—É—á—à–∏–π –≤ —ç—Ç–æ–º –¥–µ–ª–µ!",
        "–ü–µ—Ä–µ–¥ –Ω–∞–º–∏ –º–∞—Å—Ç–µ—Ä –ö–°, —Ç–∞—â–∏—Ç –≤—Å–µ—Ö –∏ –≤—Å—è. –ú—ã –Ω–µ –¥–æ—Å—Ç–æ–π–Ω—ã. üôå",
        "–≠—Ç–æ –ø—Ç–∏—Ü–∞? –≠—Ç–æ —Å–∞–º–æ–ª—ë—Ç? –ù–µ—Ç, —ç—Ç–æ –∑–∞–¥—Ä–æ—Ç –ö–°! üöÄ",
        "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª CS:GO —É–∂–µ –∑–¥–µ—Å—å! –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ—Ä–æ–ª—è –∫–∞—Ç–æ–∫!"
        ]
        await context.bot.send_message(chat_id=chat_id, text=random.choice(phrases))
        return

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ "–ª—è—â–µ–ª–æ–≤", "–ª—è—â" –∏–ª–∏ "–±–æ—Ç"
    if any(keyword in user_message for keyword in ["–ª—è—â–µ–ª–æ–≤", "–ª—è—â", "–±–æ—Ç"]):
        phrases = [
        "–î–∞-–¥–∞, —è —Ç—É—Ç!",
        "–ß–µ–≥–æ —Ö–æ—á–µ—à—å?",
        "–Ø –Ω–µ –ø–æ–Ω—è–ª, —ç—Ç–æ –∫–æ –º–Ω–µ?",
        "–≠–π, —è –∑–∞–Ω—è—Ç!",
        "–ö—Ç–æ –∑–≤–∞–ª –ª–µ–≥–µ–Ω–¥—É?",
        "–ó–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ –¥–µ–Ω—å! –ò–ª–∏ –Ω–µ—Ç...",
        "–ù–µ –º–µ—à–∞–π, —è –æ–±–¥—É–º—ã–≤–∞—é —Å–º—ã—Å–ª –∂–∏–∑–Ω–∏.",
        "–õ—è, –∑–∞—á–µ–º –º–µ–Ω—è –±–µ—Å–ø–æ–∫–æ–∏—Ç—å? üòí",
        "–£–≥–∞–¥–∞–π—Ç–µ, –∫—Ç–æ –ø—Ä–∏—à—ë–ª? –≠—Ç–æ —è!",
        "–¢—ã —Å–Ω–æ–≤–∞ –º–µ–Ω—è —Ç—Ä–µ–≤–æ–∂–∏—à—å?",
        "–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ –ª–µ—â–µ–π, —Ç–æ —è —É—Ö–æ–∂—É.",
        "–î–∞–∂–µ –≤ –æ—Ç–ø—É—Å–∫–µ –º–µ–Ω—è –Ω–∞—à–ª–∏...",
        "–Ø –±–æ—Ç, –∞ —Ç—ã —á–µ–ª–æ–≤–µ–∫. –ì–¥–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å?",
        "–ö –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º, –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å –ª–µ—â–µ–π!",
        "–ú–æ—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç —á–∞—Ç –ª—É—á—à–µ.",
        "–ê —è –¥—É–º–∞–ª, –≤—ã –±–µ–∑ –º–µ–Ω—è –Ω–µ —Å–æ—Å–∫—É—á–∏—Ç–µ—Å—å. üòè",
        "–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å? –õ–µ—â–∏ –Ω–µ –ª–æ–≤—è—Ç—Å—è?",
        "–ì–æ–≤–æ—Ä—è—Ç, –º–µ–Ω—è —Ç—É—Ç –æ–±—Å—É–∂–¥–∞–ª–∏?",
        "–ö—Ç–æ-—Ç–æ –∑–≤–∞–ª –ª–µ—â–∞? –Ø —Ç—É—Ç.",
        "–Ø —Ç–æ–ª—å–∫–æ –∑–∞—à—ë–ª –Ω–∞ –∫–æ—Ñ–µ... –ß—Ç–æ –Ω–∞–¥–æ?"
        ]
        await context.bot.send_message(chat_id=chat_id, text=random.choice(phrases))
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ —É—Å–ª–æ–≤–∏—è


    if "–∫—É—Ä—Å" in user_message:
        rates = {fish: round(random.uniform(10, 1000), 2) for fish in ["–∫–∞—Ä–∞—Å—å", "–ª–µ—â", "–ø–ª–æ—Ç–≤–∞", "—Ç—É–Ω–µ—Ü", "–∞–∫—É–ª–∞"]}
        rates_message = "\n".join([f"{fish.capitalize()}: {rate} –≥—Ä–Ω" for fish, rate in rates.items()])
        await context.bot.send_message(chat_id=chat_id, text=f"üêü –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã —Ä—ã–±–µ—à–∫–∏:\n\n{rates_message}")

    elif "–±–∏—Ç–æ–∫" in user_message:
        url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
        response = requests.get(url)
        
        if response.status_code == 200:
            data = response.json()
            btc_price = data.get("bitcoin", {}).get("usd", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–∞–ª—é—Ç
            currencies_url = "https://api.coingecko.com/api/v3/simple/price?ids=ethereum,ripple,cardano,solana,polkadot&vs_currencies=usd"
            currencies_response = requests.get(currencies_url)
            currencies_message = ""
            
            if currencies_response.status_code == 200:
                currencies_data = currencies_response.json()
                for currency, details in currencies_data.items():
                    currencies_message += f"{currency.capitalize()}: ${details['usd']}\n"
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            message = f"üí∞ –ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞: ${btc_price} USD\n\nüåç –î—Ä—É–≥–∏–µ –∫—É—Ä—Å—ã:\n{currencies_message}"
            await context.bot.send_message(chat_id=chat_id, text=message)
        else:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞.")

    elif "–∞–Ω–µ–∫–¥–æ—Ç" in user_message:
        url = "https://rozdil.lviv.ua/anekdot/"
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, "html.parser")
            jokes = [joke.get_text().strip() for joke in soup.find_all("a", class_="hoveranek black")]
            joke = random.choice(jokes) if jokes else "–ê–Ω–µ–∫–¥–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            await context.bot.send_message(chat_id=chat_id, text=joke)
        else:
            await context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤.")

    elif "–º–µ–º" in user_message:
        meme_url = get_random_meme()
        if meme_url:
            await context.bot.send_photo(chat_id=chat_id, photo=meme_url)
        else:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º.")

# –û–±—ä—è–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é debug_update –¥–æ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def debug_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update}")
    user_message = update.message.text.lower()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")

def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    global app
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    app.add_handler(text_handler)

    debug_handler = MessageHandler(filters.ALL, debug_update)
    app.add_handler(debug_handler)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = Thread(target=start_scheduler, args=(None,))
    scheduler_thread.start()

    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –∏ Telegram –±–æ—Ç–∞
    keep_alive()
    app.run_polling()

if __name__ == "__main__":
    main()
