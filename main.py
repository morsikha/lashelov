# -*- coding: utf-8 -*-
import os
import random
import requests
import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from bs4 import BeautifulSoup
from flask import Flask
from threading import Thread
import schedule
import time

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_TOKEN = "7861495333:AAGb8W-B4nFg0cM8cnmLJRCbLcTpG5yQxWI"

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@flask_app.route('/health')
def health_check():
    return "OK", 200

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    flask_app.run(host='0.0.0.0', port=port)

def keep_alive():
    Thread(target=run_flask).start()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–≤–æ–≥–∏ –≤ –ö–∏–µ–≤–µ
def check_kyiv_alert():
    url = 'https://map.ukrainealarm.com/'
    try:
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            kyiv_status = soup.find('div', class_='Kyiv')
            if kyiv_status and '–¢—Ä–∏–≤–æ–≥–∞' in kyiv_status.text:
                return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–µ–≤–æ–≥–∏: {e}")
    return False

async def send_alert_message(chat_id: int):
    message = "–ü–∞–ª—É–Ω–¥—Ä–∞ !!! –ú—ã –≤—Å–µ –æ–±–∫–∞–∫–∞–µ–º—Å—è! –¢—Ä–µ–≤–æ–≥–∞ –ö–∏–µ–≤"
    image_url = "https://raw.githubusercontent.com/morsikha/lashelov/main/alert.jpg"
    try:
        await app.bot.send_message(chat_id=chat_id, text=message)
        await app.bot.send_photo(chat_id=chat_id, photo=image_url)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def start_scheduler(chat_id: int):
    def job():
        if check_kyiv_alert():
            app.create_task(send_alert_message(chat_id))

    schedule.every(1).minutes.do(job)
    while True:
        schedule.run_pending()
        time.sleep(1)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞ —á–µ—Ä–µ–∑ API Imgflip
def get_random_meme():
    url = "https://api.imgflip.com/get_memes"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            memes = data.get("data", {}).get("memes", [])
            if memes:
                random_meme = random.choice(memes)
                return random_meme["url"]
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞: {e}")
        return None

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower()
    chat_id = update.effective_chat.id

    if any(keyword in user_message for keyword in ["–∫–∞—Ç–∫–∞", "–∫–∞—Ç–∫—É", "–∫–∞—Ç–æ—á–∫—É", "–∫—Å", "cs", "–±—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å"]):
        await context.bot.send_message(chat_id=chat_id, text="–í–Ω–∏–º–∞–Ω–∏–µ, –≤–Ω–∏–º–∞–Ω–∏–µ! –°–º–æ—Ç—Ä–∏—Ç–µ —Å—é–¥–∞: –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–∞–¥—Ä–æ—Ç –ö–° –≤ —Å–≤–æ—ë–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∞—Ä–µ–∞–ª–µ!")
        return

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ "–ª—è—â–µ–ª–æ–≤", "–ª—è—â" –∏–ª–∏ "–±–æ—Ç"
    if any(keyword in user_message for keyword in ["–ª—è—â–µ–ª–æ–≤", "–ª—è—â", "–±–æ—Ç"]):
        phrases = [
        "–î–∞-–¥–∞, —è —Ç—É—Ç!",
        "–ß–µ–≥–æ —Ö–æ—á–µ—à—å?",
        "–Ø –Ω–µ –ø–æ–Ω—è–ª, —ç—Ç–æ –∫–æ –º–Ω–µ?",
        "–≠–π, —è –∑–∞–Ω—è—Ç!",
        "–ö—Ç–æ –∑–≤–∞–ª –ª–µ–≥–µ–Ω–¥—É?",
        "–ó–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ –¥–µ–Ω—å! –ò–ª–∏ –Ω–µ—Ç...",
        "–ù–µ –º–µ—à–∞–π, —è –æ–±–¥—É–º—ã–≤–∞—é —Å–º—ã—Å–ª –∂–∏–∑–Ω–∏.",
        "–õ—è, –∑–∞—á–µ–º –º–µ–Ω—è –±–µ—Å–ø–æ–∫–æ–∏—Ç—å? üòí",
        "–£–≥–∞–¥–∞–π—Ç–µ, –∫—Ç–æ –ø—Ä–∏—à—ë–ª? –≠—Ç–æ —è!",
        "–¢—ã —Å–Ω–æ–≤–∞ –º–µ–Ω—è —Ç—Ä–µ–≤–æ–∂–∏—à—å?",
        "–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ –ª–µ—â–µ–π, —Ç–æ —è —É—Ö–æ–∂—É.",
        "–î–∞–∂–µ –≤ –æ—Ç–ø—É—Å–∫–µ –º–µ–Ω—è –Ω–∞—à–ª–∏...",
        "–Ø –±–æ—Ç, –∞ —Ç—ã —á–µ–ª–æ–≤–µ–∫. –ì–¥–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å?",
        "–ö –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º, –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å –ª–µ—â–µ–π!",
        "–ú–æ—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç —á–∞—Ç –ª—É—á—à–µ.",
        "–ê —è –¥—É–º–∞–ª, –≤—ã –±–µ–∑ –º–µ–Ω—è –Ω–µ —Å–æ—Å–∫—É—á–∏—Ç–µ—Å—å. üòè",
        "–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å? –õ–µ—â–∏ –Ω–µ –ª–æ–≤—è—Ç—Å—è?",
        "–ì–æ–≤–æ—Ä—è—Ç, –º–µ–Ω—è —Ç—É—Ç –æ–±—Å—É–∂–¥–∞–ª–∏?",
        "–ö—Ç–æ-—Ç–æ –∑–≤–∞–ª –ª–µ—â–∞? –Ø —Ç—É—Ç.",
        "–Ø —Ç–æ–ª—å–∫–æ –∑–∞—à—ë–ª –Ω–∞ –∫–æ—Ñ–µ... –ß—Ç–æ –Ω–∞–¥–æ?"
        ]
        await context.bot.send_message(chat_id=chat_id, text=random.choice(phrases))
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ —É—Å–ª–æ–≤–∏—è


    if "–∫—É—Ä—Å" in user_message:
        rates = {fish: round(random.uniform(10, 1000), 2) for fish in ["–∫–∞—Ä–∞—Å—å", "–ª–µ—â", "–ø–ª–æ—Ç–≤–∞", "—Ç—É–Ω–µ—Ü", "–∞–∫—É–ª–∞"]}
        rates_message = "\n".join([f"{fish.capitalize()}: {rate} –≥—Ä–Ω" for fish, rate in rates.items()])
        await context.bot.send_message(chat_id=chat_id, text=f"üêü –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã —Ä—ã–±–µ—à–∫–∏:\n\n{rates_message}")

    elif "–±–∏—Ç–æ–∫" in user_message:
        url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
        response = requests.get(url)
        
        if response.status_code == 200:
            data = response.json()
            btc_price = data.get("bitcoin", {}).get("usd", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–∞–ª—é—Ç
            currencies_url = "https://api.coingecko.com/api/v3/simple/price?ids=ethereum,ripple,cardano,solana,polkadot&vs_currencies=usd"
            currencies_response = requests.get(currencies_url)
            currencies_message = ""
            
            if currencies_response.status_code == 200:
                currencies_data = currencies_response.json()
                for currency, details in currencies_data.items():
                    currencies_message += f"{currency.capitalize()}: ${details['usd']}\n"
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            message = f"üí∞ –ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞: ${btc_price} USD\n\nüåç –î—Ä—É–≥–∏–µ –∫—É—Ä—Å—ã:\n{currencies_message}"
            await context.bot.send_message(chat_id=chat_id, text=message)
        else:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞.")

    elif "–∞–Ω–µ–∫–¥–æ—Ç" in user_message:
        url = "https://rozdil.lviv.ua/anekdot/"
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, "html.parser")
            jokes = [joke.get_text().strip() for joke in soup.find_all("a", class_="hoveranek black")]
            joke = random.choice(jokes) if jokes else "–ê–Ω–µ–∫–¥–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            await context.bot.send_message(chat_id=chat_id, text=joke)
        else:
            await context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤.")

    elif "–º–µ–º" in user_message:
        meme_url = get_random_meme()
        if meme_url:
            await context.bot.send_photo(chat_id=chat_id, photo=meme_url)
        else:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º.")

# –û–±—ä—è–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é debug_update –¥–æ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def debug_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update}")
    user_message = update.message.text.lower()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")

def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    global app
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    app.add_handler(text_handler)

    debug_handler = MessageHandler(filters.ALL, debug_update)
    app.add_handler(debug_handler)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = Thread(target=start_scheduler, args=(None,))
    scheduler_thread.start()

    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –∏ Telegram –±–æ—Ç–∞
    keep_alive()
    app.run_polling()

if __name__ == "__main__":
    main()
