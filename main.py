# -*- coding: utf-8 -*-
import os
import random
import requests
import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError
from bs4 import BeautifulSoup
from flask import Flask
from threading import Thread
import schedule
import time

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_TOKEN = "7861495333:AAGb8W-B4nFg0cM8cnmLJRCbLcTpG5yQxWI"

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à API-–∫–ª—é—á OpenWeatherMap
OPENWEATHER_API_KEY = "f90904c2ab88b6543e799322389c4c31"

# URL –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–∏ —Ç—Ä–µ–≤–æ–≥–µ
ALERT_IMAGE_URL = "https://raw.githubusercontent.com/–≤–∞—à-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π/alert.jpg"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@flask_app.route('/health')
def health_check():
    return "OK", 200

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    flask_app.run(host='0.0.0.0', port=port)

def keep_alive():
    Thread(target=run_flask).start()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ HLTV Unofficial API
def get_upcoming_matches():
    url = "https://hltv-api.vercel.app/api/matches"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            matches = data.get("matches", [])
            if matches:
                upcoming_matches = []
                for match in matches[:5]:  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –º–∞—Ç—á–µ–π
                    team1 = match.get("team1", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    team2 = match.get("team2", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    time = match.get("time", "–í—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    tournament = match.get("event", {}).get("name", "–¢—É—Ä–Ω–∏—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                    upcoming_matches.append(f"{team1} vs {team2}\n–¢—É—Ä–Ω–∏—Ä: {tournament}\n–í—Ä–µ–º—è: {time}")
                return "\n\n".join(upcoming_matches)
            else:
                return "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP {response.status_code} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π.")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except requests.exceptions.Timeout:
        logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ HLTV API.")
        return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ HLTV API: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ HLTV API."
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower()
    chat_id = update.effective_chat.id

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–ª–æ–≤–æ "–ø–æ–≥–æ–¥–∞"
    if "–ø–æ–≥–æ–¥–∞" in user_message:
        weather_info = get_weather()
        await context.bot.send_message(chat_id=chat_id, text=weather_info)
        return

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–ª–æ–≤–∞ "–∫—Å", "–∫–∞—Ç–∫–∞" –∏ –ø–æ–¥–æ–±–Ω—ã–µ
    if any(keyword in user_message for keyword in ["–∫–∞—Ç–∫–∞", "–∫—Å", "cs", "–±—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å"]):
        phrases = [
            "–í–Ω–∏–º–∞–Ω–∏–µ! –ù–∞—Å—Ç–æ—è—â–∏–π –∑–∞–¥—Ä–æ—Ç –ö–°!",
            "–í—Å–µ–º –∑–∞–º–µ—Ä–µ—Ç—å! –ó–∞–¥—Ä–æ—Ç –≤ —á–∞—Ç–µ!",
            "–û–ø–∞—Å–Ω–æ—Å—Ç—å! –ó–∞–¥—Ä–æ—Ç –ö–° –≤ –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è. –°—Ä–æ—á–Ω–æ –∏—â–µ–º –ø—Ä–æ—Ç–∏–≤–æ—è–¥–∏–µ!",
            "–≠–π, —á–µ–º–ø–∏–æ–Ω! –¢—ã —Å–Ω–æ–≤–∞ –≤ –¥–µ–ª–µ? –ì–æ—Ç–æ–≤—å—Å—è, —Ç–≤–æ—è –∫–∞—Ç–∫–∞ –∂–¥—ë—Ç!",
            "–õ–µ–≥–µ–Ω–¥–∞ –ö–° –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —á–∞—Ç–µ! –í—Å–µ –∞–ø–ª–æ–¥–∏—Ä—É–µ–º! üëè",
        ]
        await context.bot.send_message(chat_id=chat_id, text=random.choice(phrases))
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–∫—É—Ä—Å"
    if "–∫—É—Ä—Å" in user_message:
        rates = {fish: round(random.uniform(10, 1000), 2) for fish in ["–∫–∞—Ä–∞—Å—å", "–ª–µ—â", "–ø–ª–æ—Ç–≤–∞", "—Ç—É–Ω–µ—Ü", "–∞–∫—É–ª–∞"]}
        rates_message = "\n".join([f"{fish.capitalize()}: {rate} –≥—Ä–Ω" for fish, rate in rates.items()])
        await context.bot.send_message(chat_id=chat_id, text=f"üêü –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã —Ä—ã–±–µ—à–∫–∏:\n\n{rates_message}")
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–±–∏—Ç–æ–∫"
    if "–±–∏—Ç–æ–∫" in user_message:
        url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            btc_price = data.get("bitcoin", {}).get("usd", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            currencies_url = "https://api.coingecko.com/api/v3/simple/price?ids=ethereum,ripple,cardano,solana,polkadot&vs_currencies=usd"
            currencies_response = requests.get(currencies_url)
            currencies_message = ""
            if currencies_response.status_code == 200:
                currencies_data = currencies_response.json()
                for currency, details in currencies_data.items():
                    currencies_message += f"{currency.capitalize()}: ${details['usd']}\n"
            message = f"üí∞ –ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞: ${btc_price} USD\n\nüåç –î—Ä—É–≥–∏–µ –∫—É—Ä—Å—ã:\n{currencies_message}"
            await context.bot.send_message(chat_id=chat_id, text=message)
        else:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞.")
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–∞–Ω–µ–∫–¥–æ—Ç"
    if "–∞–Ω–µ–∫–¥–æ—Ç" in user_message:
        joke = get_joke()
        await context.bot.send_message(chat_id=chat_id, text=joke)
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–º–µ–º"
    if "–º–µ–º" in user_message:
        meme_url = get_random_meme()
        if meme_url:
            await context.bot.send_photo(chat_id=chat_id, photo=meme_url)
        else:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º.")
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–≥–µ–π–º"
    if "–≥–µ–π–º" in user_message:
        matches_info = get_upcoming_matches()
        await context.bot.send_message(chat_id=chat_id, text=f"üéÆ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –ø–æ CS2:\n\n{matches_info}")
        return

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler(app)

    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –∏ Telegram Polling
    keep_alive()
    Thread(target=lambda: schedule.run_pending()).start()
    app.run_polling()

if __name__ == "__main__":
    main()
