# -*- coding: utf-8 -*-
import os
import random
import requests
import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from flask import Flask
from threading import Thread
import schedule

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_TOKEN = "7861495333:AAGb8W-B4nFg0cM8cnmLJRCbLcTpG5yQxWI"

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à API-–∫–ª—é—á OpenWeatherMap
OPENWEATHER_API_KEY = "f90904c2ab88b6543e799322389c4c31"

# URL –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–∏ —Ç—Ä–µ–≤–æ–≥–µ
ALERT_IMAGE_URL = "https://raw.githubusercontent.com/–≤–∞—à-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π/alert.jpg"

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@flask_app.route('/health')
def health_check():
    return "OK", 200

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    flask_app.run(host='0.0.0.0', port=port)

def keep_alive():
    Thread(target=run_flask).start()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–≤–æ–≥–∏
async def send_alert_to_groups(app):
    try:
        message = "üö® –£–≤–∞–≥–∞! –ª–µ—Ç–∏—Ç —è–∫–∞—Å—å –∫–∞–∫–∞—à–∫–∞!"
        async with app.bot:
            updates = await app.bot.get_updates()
            for update in updates:
                if update.message and update.message.chat.type in ["group", "supergroup"]:
                    chat_id = update.message.chat.id
                    await app.bot.send_message(chat_id=chat_id, text=message)
                    await app.bot.send_photo(chat_id=chat_id, photo=ALERT_IMAGE_URL)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

def scheduler(app):
    schedule.every(1).minutes.do(lambda: app.create_task(send_alert_to_groups(app)))

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
def get_bitcoin_and_other_currencies():
    try:
        btc_url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
        btc_response = requests.get(btc_url).json()
        btc_price = btc_response.get("bitcoin", {}).get("usd", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        currencies_url = "https://api.coingecko.com/api/v3/simple/price?ids=ethereum,ripple,cardano,solana,polkadot&vs_currencies=usd"
        currencies_response = requests.get(currencies_url).json()
        
        currencies_message = "\n".join([f"{currency.capitalize()}: ${details['usd']}" for currency, details in currencies_response.items()])
        return f"üí∞ –ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞: ${btc_price} USD\n\nüåç –î—Ä—É–≥–∏–µ –∫—É—Ä—Å—ã:\n{currencies_message}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –°–ª—É—á–∞–π–Ω—ã–π –∫—É—Ä—Å —Ä—ã–±—ã
def get_fish_rates():
    rates = {fish: round(random.uniform(10, 1000), 2) for fish in ["–∫–∞—Ä–∞—Å—å", "–ª–µ—â", "–ø–ª–æ—Ç–≤–∞", "—Ç—É–Ω–µ—Ü", "–∞–∫—É–ª–∞"]}
    return "\n".join([f"{fish.capitalize()}: {rate} –≥—Ä–Ω" for fish, rate in rates.items()])

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
def get_joke():
    url = "https://rozdil.lviv.ua/anekdot/"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, "html.parser")
            jokes = [joke.get_text().strip() for joke in soup.find_all("a", class_="hoveranek black")]
            return random.choice(jokes) if jokes else "–ê–Ω–µ–∫–¥–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –≤ –ö–∏–µ–≤–µ
def get_weather():
    city = "Kyiv"
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            temp = round(data['main']['temp'])
            description = data['weather'][0]['description']
            return f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {temp}¬∞C, {description.capitalize()}"
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–º–∞ —á–µ—Ä–µ–∑ API Imgflip
def get_random_meme():
    url = "https://api.imgflip.com/get_memes"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            memes = response.json().get("data", {}).get("memes", [])
            return random.choice(memes)["url"] if memes else None
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞: {e}")
        return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π CS2
def get_upcoming_matches():
    url = "https://hltv-api.vercel.app/api/matches"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            matches = response.json()
            return "\n".join([f"{match['time']}: {', '.join([team['name'] for team in match['teams']])}" for match in matches[:10]])
        return "–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–µ–π."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower()
    chat_id = update.effective_chat.id

    if "–ø–æ–≥–æ–¥–∞" in user_message:
        await context.bot.send_message(chat_id, get_weather())
    elif "–∫—Å" in user_message or "–∫–∞—Ç–∫–∞" in user_message:
        phrases = ["–°–Ω–æ–≤–∞ –∑–∞–¥—Ä–æ—Ç –≤ –¥–µ–ª–µ! üéÆ", "–ì–æ—Ç–æ–≤—å—Å—è –∫ –±–∏—Ç–≤–µ! üî•"]
        await context.bot.send_message(chat_id, random.choice(phrases))
    elif "–≥–µ–π–º" in user_message:
        await context.bot.send_message(chat_id, get_upcoming_matches())
    elif "–±–∏—Ç–æ–∫" in user_message:
        await context.bot.send_message(chat_id, get_bitcoin_and_other_currencies())
    elif "–∫—É—Ä—Å" in user_message:
        await context.bot.send_message(chat_id, f"üêü –ö—É—Ä—Å—ã —Ä—ã–±–µ—à–∫–∏:\n\n{get_fish_rates()}")
    elif "–∞–Ω–µ–∫–¥–æ—Ç" in user_message:
        await context.bot.send_message(chat_id, get_joke())
    elif "–º–µ–º" in user_message:
        meme_url = get_random_meme()
        if meme_url:
            await context.bot.send_photo(chat_id, meme_url)
        else:
            await context.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    scheduler(app)
    keep_alive()
    Thread(target=schedule.run_pending).start()
    app.run_polling()

if __name__ == "__main__":
    main()
