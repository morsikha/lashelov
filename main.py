# -*- coding: utf-8 -*-
import os
import random
import requests
import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError
from bs4 import BeautifulSoup
from flask import Flask
from threading import Thread
import schedule
import time

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_TOKEN = "7861495333:AAGb8W-B4nFg0cM8cnmLJRCbLcTpG5yQxWI"

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à API-–∫–ª—é—á OpenWeatherMap
OPENWEATHER_API_KEY = "f90904c2ab88b6543e799322389c4c31"

# URL –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–∏ —Ç—Ä–µ–≤–æ–≥–µ
ALERT_IMAGE_URL = "https://raw.githubusercontent.com/–≤–∞—à-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π/alert.jpg"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@flask_app.route('/health')
def health_check():
    return "OK", 200

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    flask_app.run(host='0.0.0.0', port=port)

def keep_alive():
    Thread(target=run_flask).start()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def scheduler(app):
    schedule.every(1).minutes.do(lambda: app.create_task(send_alert_to_groups(app)))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–≤–æ–≥–∏ –≤ Telegram-–≥—Ä—É–ø–ø—ã
async def send_alert_to_groups(app: Application):
    try:
        message = "üö® –£–≤–∞–≥–∞! –ª–µ—Ç–∏—Ç —è–∫–∞—Å—å –∫–∞–∫–∞—à–∫–∞!"
        async with app.bot:
            updates = await app.bot.get_updates()
            for update in updates:
                if update.message and update.message.chat.type in ["group", "supergroup"]:
                    chat_id = update.message.chat.id
                    try:
                        await app.bot.send_message(chat_id=chat_id, text=message)
                        await app.bot.send_photo(chat_id=chat_id, photo=ALERT_IMAGE_URL)
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É —Å chat_id: {chat_id}")
                    except TelegramError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –±–∏—Ç–∫–æ–∏–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç
def get_bitcoin_and_other_currencies():
    try:
        btc_url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
        btc_response = requests.get(btc_url).json()
        btc_price = btc_response.get("bitcoin", {}).get("usd", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        currencies_url = "https://api.coingecko.com/api/v3/simple/price?ids=ethereum,ripple,cardano,solana,polkadot&vs_currencies=usd"
        currencies_response = requests.get(currencies_url).json()

        currencies_message = ""
        for currency, details in currencies_response.items():
            currencies_message += f"{currency.capitalize()}: ${details['usd']}\n"

        return f"üí∞ –ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞: ${btc_price} USD\n\nüåç –î—Ä—É–≥–∏–µ –∫—É—Ä—Å—ã:\n{currencies_message}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
def get_joke():
    url = "https://rozdil.lviv.ua/anekdot/"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, "html.parser")
            jokes = [joke.get_text().strip() for joke in soup.find_all("a", class_="hoveranek black")]
            if jokes:
                return random.choice(jokes)
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
                return "–ê–Ω–µ–∫–¥–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        else:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP {response.status_code} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤.")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–∞–π—Ç—É –∞–Ω–µ–∫–¥–æ—Ç–æ–≤: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è –ö–∏–µ–≤–∞
def get_weather():
    city = "Kyiv"
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            temp = round(data['main']['temp'])
            description = data['weather'][0]['description']
            return f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {temp}¬∞C, {description.capitalize()}"
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞ —á–µ—Ä–µ–∑ API Imgflip
def get_random_meme():
    url = "https://api.imgflip.com/get_memes"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            memes = data.get("data", {}).get("memes", [])
            if memes:
                return random.choice(memes)["url"]
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞: {e}")
        return None

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower()
    chat_id = update.effective_chat.id

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–ª–æ–≤–æ "–ø–æ–≥–æ–¥–∞"
    if "–ø–æ–≥–æ–¥–∞" in user_message:
        weather_info = get_weather()
        await context.bot.send_message(chat_id=chat_id, text=weather_info)
        return

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–ª–æ–≤–∞ "–∫—Å", "–∫–∞—Ç–∫–∞" –∏ –ø–æ–¥–æ–±–Ω—ã–µ
    if any(keyword in user_message for keyword in ["–∫–∞—Ç–∫–∞", "–∫—Å", "cs", "–±—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å"]):
        phrases = [
            "–í–Ω–∏–º–∞–Ω–∏–µ! –ù–∞—Å—Ç–æ—è—â–∏–π –∑–∞–¥—Ä–æ—Ç –ö–°!",
            "–í—Å–µ–º –∑–∞–º–µ—Ä–µ—Ç—å! –ó–∞–¥—Ä–æ—Ç –≤ —á–∞—Ç–µ!",
            "–û–ø–∞—Å–Ω–æ—Å—Ç—å! –ó–∞–¥—Ä–æ—Ç –ö–° –≤ –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è. –°—Ä–æ—á–Ω–æ –∏—â–µ–º –ø—Ä–æ—Ç–∏–≤–æ—è–¥–∏–µ!",
            "–≠–π, —á–µ–º–ø–∏–æ–Ω! –¢—ã —Å–Ω–æ–≤–∞ –≤ –¥–µ–ª–µ? –ì–æ—Ç–æ–≤—å—Å—è, —Ç–≤–æ—è –∫–∞—Ç–∫–∞ –∂–¥—ë—Ç!",
            "–õ–µ–≥–µ–Ω–¥–∞ –ö–° –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —á–∞—Ç–µ! –í—Å–µ –∞–ø–ª–æ–¥–∏—Ä—É–µ–º! üëè",
        ]
        await context.bot.send_message(chat_id=chat_id, text=random.choice(phrases))
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–≥–µ–π–º"
    if "–≥–µ–π–º" in user_message:
        matches_info = get_upcoming_matches()
        await context.bot.send_message(chat_id=chat_id, text=f"üéÆ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –ø–æ CS2:\n\n{matches_info}")
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–±–∏—Ç–æ–∫"
    if "–±–∏—Ç–æ–∫" in user_message or "–∫—É—Ä—Å" in user_message:
        currency_info = get_bitcoin_and_other_currencies()
        await context.bot.send_message(chat_id=chat_id, text=currency_info)
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–∞–Ω–µ–∫–¥–æ—Ç"
    if "–∞–Ω–µ–∫–¥–æ—Ç" in user_message:
        joke = get_joke()
        await context.bot.send_message(chat_id=chat_id, text=joke)
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–º–µ–º"
    if "–º–µ–º" in user_message:
        meme_url = get_random_meme()
        if meme_url:
            await context.bot.send_photo(chat_id=chat_id, photo=meme_url)
        else:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º.")
        return

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler(app)

    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –∏ Telegram Polling
    keep_alive()
    Thread(target=lambda: schedule.run_pending()).start()
    app.run_polling()

if __name__ == "__main__":
    main()
