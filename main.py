# -*- coding: utf-8 -*-
import random
import requests
import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from bs4 import BeautifulSoup
from flask import Flask
from threading import Thread
import schedule
import time

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_TOKEN = "–í–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å"  # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Telegram Bot
app = Application.builder().token(TELEGRAM_TOKEN).build()

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    flask_app.run(host='0.0.0.0', port=8080)

def keep_alive():
    Thread(target=run_flask).start()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–≤–æ–≥–∏ –≤ –ö–∏–µ–≤–µ
def check_kyiv_alert():
    url = 'https://map.ukrainealarm.com/'
    try:
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            kyiv_status = soup.find('div', class_='Kyiv')  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä
            if kyiv_status and '–¢—Ä–∏–≤–æ–≥–∞' in kyiv_status.text:
                return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–µ–≤–æ–≥–∏: {e}")
    return False

async def send_alert_message(chat_id: int):
    message = "–ü–∞–ª—É–Ω–¥—Ä–∞ !!! –ú—ã –≤—Å–µ –æ–±–∫–∞–∫–∞–µ–º—Å—è! –¢—Ä–µ–≤–æ–≥–∞ –ö–∏–µ–≤"
    image_url = "https://raw.githubusercontent.com/morsikha/lashelov/main/alert.jpg"
    try:
        await app.bot.send_message(chat_id=chat_id, text=message)
        await app.bot.send_photo(chat_id=chat_id, photo=image_url)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def start_scheduler(chat_id: int):
    def job():
        if check_kyiv_alert():
            app.create_task(send_alert_message(chat_id))  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤

    schedule.every(1).minutes.do(job)
    while True:
        schedule.run_pending()
        time.sleep(1)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower()
    chat_id = update.effective_chat.id

    if "–∫—É—Ä—Å" in user_message:
        rates = {fish: round(random.uniform(10, 1000), 2) for fish in ["–∫–∞—Ä–∞—Å—å", "–ª–µ—â", "–ø–ª–æ—Ç–≤–∞", "—Ç—É–Ω–µ—Ü", "–∞–∫—É–ª–∞"]}
        rates_message = "\n".join([f"{fish.capitalize()}: {rate} –≥—Ä–Ω" for fish, rate in rates.items()])
        await context.bot.send_message(chat_id=chat_id, text=f"üêü –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã —Ä—ã–±–µ—à–∫–∏:\n\n{rates_message}")

    elif "–±–∏—Ç–æ–∫" in user_message:
        url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
        response = requests.get(url)
        if response.status_code == 200:
            btc_price = response.json()["bitcoin"]["usd"]
            await context.bot.send_message(chat_id=chat_id, text=f"üí∞ –ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞: ${btc_price} USD")
        else:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞.")

    elif "–∞–Ω–µ–∫–¥–æ—Ç" in user_message:
        url = "https://rozdil.lviv.ua/anekdot/"
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, "html.parser")
            jokes = [joke.get_text().strip() for joke in soup.find_all("a", class_="hoveranek black")]
            joke = random.choice(jokes) if jokes else "–ê–Ω–µ–∫–¥–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            await context.bot.send_message(chat_id=chat_id, text=joke)
        else:
            await context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤.")

    elif "–º–µ–º" in user_message:
        meme_url = "https://raw.githubusercontent.com/morsikha/lashelov/main/alert.jpg"
        await context.bot.send_photo(chat_id=chat_id, photo=meme_url)

async def debug_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.ALL, debug_update))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    chat_id = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π chat_id
    Thread(target=start_scheduler, args=(chat_id,)).start()

    keep_alive()  # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    app.run_polling()

if __name__ == '__main__':
    main()
